{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "add2244c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "http://localhost:8080/test_connectivity_M1\n",
      "STATUS CODE:200\n",
      "{\"results\": [{\"Milestone 1\": \"Milestone 1 to be completed\"}]}\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "import os\n",
    "import json\n",
    "\n",
    "#Function to connect to the server. It returns:\n",
    "#   - response => A JSON containing the answer\n",
    "#   - status code: \n",
    "#       -200: If everything was OK.\n",
    "#       -400: If the server detectes an error in the query.\n",
    "\n",
    "def connect_to_server(url):\n",
    "    response = requests.request(\"GET\", url)\n",
    "    print(\"STATUS CODE:\"+str(response.status_code))\n",
    "    return response.status_code, response\n",
    "\n",
    "\n",
    "#Below you have all the endpoints options. \n",
    "#You just need to uncomment the one you want to use.\n",
    "\n",
    "endpoint=\"test_connectivity_M1\"\n",
    "#endpoint=\"count_countries_M2\"\n",
    "#endpoint=\"count_countries_M3\"\n",
    "#endpoint=\"age_groups_M4\"\n",
    "#endpoint=\"users_M5\"\n",
    "#endpoint=\"users_control_error_M6\"\n",
    "#endpoint=\"access_token_M7\"\n",
    "\n",
    "\n",
    "#This is a preliminary code that prints the received output in the screen.\n",
    "#You need to substitute this code in each milestone to print the requested\n",
    "#output per screen.\n",
    "url = \"http://localhost:8080/{}\".format(endpoint) \n",
    "print(url)\n",
    "status_code, response= connect_to_server(url)\n",
    "json_output=response.json()\n",
    "print(response.text)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ca9a58c-0223-43e3-acbb-ddb9417309b2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54987423-70c8-4a94-8fac-55c4e915fb21",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "744d253f-a813-4423-a1da-5d19ebdd9383",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
